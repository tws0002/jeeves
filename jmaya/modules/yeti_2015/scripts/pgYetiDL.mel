//
// pgYetiDL - commands to register Yeti nodes with 3delight for Maya
// 
// (c) 2010-Present Peregrine Labs a division of Peregrine Visual Storytelling Ltd.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Peregrine Visual Storytelling Ltd. ("Peregrine") 
// and/or its licensors, which is protected by U.S. and Canadian federal 
// copyright law and by international treaties.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. PEREGRINE
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL PEREGRINE AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF PEREGRINE AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
//

// These are provided as an example of what a studio would need to add to a global 3delight installation
// If Yeti is your only procedural DSO for 3delight you can safetly source this file, otherwise 
// you'll want to use a global mel file. Please refer to the 3delight for Maya documentation for details.
global proc DL_userGetGeoTypeData (string $node_types[], string $plugin_requirements[], string $cache_commands[], string $not_used[])
{
    $node_types[0] = "pgYetiMaya";
    $plugin_requirements[0] = "";
    $cache_commands[0] = "pgYetiRenderCommand";
    $not_used[0] = "";
}

global proc int DL_pgYetiMayaCanUseObjectInstance(string $shape_name)
{
	return 0;
}