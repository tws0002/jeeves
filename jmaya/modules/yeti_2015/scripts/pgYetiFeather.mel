//
// pgYetiFeather - Yeti Maya Feather script support
// 
// (c) 2010-Present Peregrine Labs a division of Peregrine Visual Storytelling Ltd.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Peregrine Visual Storytelling Ltd. ("Peregrine") 
// and/or its licensors, which is protected by U.S. and Canadian federal 
// copyright law and by international treaties.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. PEREGRINE
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL PEREGRINE AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF PEREGRINE AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
//

// Procedures related to Feather nodes

// Create a new Feather and return the shape node created as a string.
global proc string pgYetiCreateFeather()
{
	string $newPgYetiFeather = `createNode pgYetiMayaFeather`;
				
	// rename the parent and node
	string $transforms[] = `listRelatives -p $newPgYetiFeather`;
	rename $newPgYetiFeather "tempPgYetiFeatherName";
	string $transform_name = `rename $transforms[0] pgYetiFeather`;
	$newPgYetiFeather = `rename "tempPgYetiFeatherName" ( $transform_name + "Shape" )`;
	
	connectAttr ( $transform_name + ".worldMatrix" ) ( $newPgYetiFeather + ".transform" );
	
	return $newPgYetiFeather;
}

