# SPDL Generated by XSI Shader Wizard
SPDL
Version = "2.0.0.0";
Reference = "{9BB54762-D4CE-407E-BAEF-09C954535137}";

Language = "JScript";

PropertySet "VRayDirt_pset"
{
	Parameter "out" output
	{
		GUID = "{58B633FF-EFC6-40D1-90B2-2B6D587A85A5}";
		Type = color;
	}
	Parameter "occluded_col" input
	{
		GUID = "{4844D89D-5EC2-4DD0-921C-4969AF1088A9}";
		ui "mapping" = "{3515CC72-082C-11D0-91DE-00A024C78EE3}";
		Type = color;
		Value = 0.0 0.0 0.0 1.0;
		Texturable = on;
	}
	Parameter "unoccluded_col" input
	{
		GUID = "{9F2F38D6-0DD3-4798-9DC6-A970C33919BA}";
		Type = color;
		Value = 1.0 1.0 1.0 1.0;
		Texturable = on;
	}
	Parameter "radius" input
	{
		GUID = "{4CC334D5-B879-4D9B-9C95-223EA7CBDA07}";
		Type = scalar;
		Texturable = on;
		Value = 10.0;
		Value Minimum = 0.0;
	}
	Parameter "distribution" input
	{
		GUID = "{64650ACF-3B1B-4D8C-8CC6-D66082032A1B}";
		Type = scalar;
		Value = 1.0;
		Value Minimum = 0.0;
		Value Maximum = 10000.0;
	}
	Parameter "falloff" input
	{
		GUID = "{F0456D69-8EC8-49CB-85CC-FA798D74DB72}";
		Type = scalar;
		Value = 0.0;
		Value Minimum = 0.0;		
	}
	Parameter "subdivs" input
	{
		GUID = "{FD444AB0-21F9-42C9-832E-C01441228B3D}";
		Type = integer;
		Value = 8;
		Value Minimum = 1;
		Value Maximum = 1000;
		Animatable = off;
	}
	Parameter "bias_x" input
	{
		GUID = "{6C3CB8AF-A225-405A-9880-8B43CBD19B13}";
		Type = scalar;
		Value = 0.0;		
	}
	Parameter "bias_y" input
	{
		GUID = "{CF9F6FFF-E038-4D61-92DC-19F2C87B106C}";
		Type = scalar;
		Value = 0.0;		
	}
	Parameter "bias_z" input
	{
		GUID = "{75B1DA58-F153-4703-BFFF-B13B839843FD}";
		Type = scalar;
		Value = 0.0;		
	}
	Parameter "affect_alpha" input
	{
		GUID = "{A7813632-6DC3-4F84-A7F1-935EA03BA5DB}";
		Type = boolean;
		Value = off;
	}
	Parameter "ignore_for_gi" input
	{
		GUID = "{7F6BD14D-2D37-4A30-BE18-E89F5369F758}";
		Type = boolean;
		Value = on;
		Animatable = off;
	}
	Parameter "consider_same_object_only" input
	{
		GUID = "{E9FDC9A5-ACF9-4695-AC98-DCD3F4BC1CBC}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "double_sided" input
	{
		GUID = "{2B55637B-FE4F-49D7-8EE6-5FD6D0050516}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "invert_normal" input
	{
		GUID = "{B72312D9-A97B-4C44-8159-0B429531A536}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "work_with_transparency" input
	{
		GUID = "{974625DF-D18C-484B-9836-3E0C6BA7A526}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "ignore_self_occlusion" input
	{
		GUID = "{85C73C0F-6725-462D-898A-C27121BF409E}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "environment_occlusion" input
	{
		GUID = "{8A728179-3415-4BFD-8142-CB4CB9AC484F}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "mode" input
	{
		GUID = "{A57D6C2D-180A-42C2-AB3A-B969121C4335}";
		Type = integer;
		Value = 0;
		Animatable = off;
	}
	Parameter "affect_reflection_elements" input
	{
		GUID = "{ED3BD581-D198-442B-BD82-65E54F6C65DA}";
		Type = boolean;
		Value = off;
		Animatable = off;
	}
	Parameter "glossiness" input
	{
		GUID = "{59C2E3D6-3E68-4C55-88C7-51E04AA213FF}";
		Type = scalar;
		Value = 1.0;
		Texturable = on;		
	}
	Parameter "Render_exclude_list" input
	{		
		GUID		= "{2E0915D2-6453-47F9-B02A-E4188426059E}";		
		Type		= string;
	}
	
	Parameter "Render_include_list" input
	{		
		GUID		= "{47950C6B-AE7B-4042-AA2F-4C0DBF374AA9}";	
		Type		= string;
	}
    
    Parameter "render_include_objs_str" input
	{
		GUID		= "{4E390BCF-7123-4585-A9B8-98941CE24116}";
		Type 		= string;
	}
	Parameter "render_exclude_objs_str" input
	{
		GUID		= "{8FF309BA-CB48-41D0-B6A8-00D1006DE2C1}";
		Type 		= string;
	} 
    
	Parameter "Affect_exclude_list" input
	{		
		GUID		= "{8A045EB4-D4E8-480A-A045-FB2174F0BCBD}";		
		Type		= string;
	}
	Parameter "Affect_include_list" input
	{		
		GUID		= "{0FF8DE75-2B90-42BF-8971-E94C0CBC4F6F}";	
		Type		= string;
	}
    
	Parameter "affect_include_objs_str" input
	{
		GUID		= "{DE5875E0-A981-4F53-8931-6E853EE51DDB}";
		Type 		= string;
	}
	Parameter "affect_exclude_objs_str" input
	{
		GUID		= "{6C78F516-950A-4441-B7FB-97744E4EEC7F}";
		Type 		= string;
	}    
}

MetaShader "VRayDirt_meta"
{
	Name = "VRay Dirt Shader";
	Type = texture;
	Renderer "mental ray"
	{
		Name = "VRayDirt";
		FileName = "VRayDirt";
		Options
		{
			"version" = 1;
		}
	}
	Renderer "V-Ray"
	{
		Name = "VRayDirt";
		Options
		{
			"version" = 1;
		}
	}
}

Defaults
{
	occluded_col
	{
		Name = "Occluded color";
		UIType = "rgba",4;
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	unoccluded_col
	{
		Name = "Unoccluded color";
		UIType = "rgba",4;
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	radius
	{
		Name = "Radius";
		UIRange = 0.0 To 100.0;
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}
	distribution
	{
		Name = "Distribution";
		UIRange = 0.0 To 100.0;
	}
	falloff
	{
		Name = "Falloff";
		UIRange = 0.0 To 100.0;
	}
	subdivs
	{
		Name = "Subdivs";
		UIRange = 1 To 100;
	}
	bias_x
	{
		Name = "Bias X";	
		UIRange = -100 To 100;			
	}
	bias_y
	{
		Name = "Bias Y";
		UIRange = -100 To 100;			
	}
	bias_z
	{
		Name = "Bias Z";	
		UIRange = -100 To 100;			
	}
	ignore_for_gi
	{
		Name = "Ignore for GI";
	}
	consider_same_object_only
	{
		Name = "Same object only";
	}
	double_sided
	{
		Name = "Double sided";
	}
	invert_normal
	{
		Name = "Invert normal";
	}
	work_with_transparency
	{
		Name = "Work with transperancy";
	}
	ignore_self_occlusion
	{
		Name = "Ignore Self Occlusion";
	}
	environment_occlusion
	{
		Name = "Environment Occlusion";
	}	
	mode
	{
		Name = "Occlusion Mode";
		Range = 0 to 3;
		UIType = "Combo";
        Items
        {
           "Ambient occlusion" = 0
           "Reflection occlusion (Phong)" = 1
           "Reflection occlusion (Blinn)" = 2
		   "Reflection occlusion (Ward)"  = 3	
        }
	}
	affect_reflection_elements
	{
		Name = "Affect Reflection Elements";
	}
	glossiness
	{
		Name = "Glossiness";
		UIRange = 0 To 1;
	}	
	Render_exclude_list
	{
		Name = "Exclude list";
		UIType = "ListBox";
	}
	Render_include_list
	{
		Name = "Include list";
		UIType = "ListBox";
	}
	Affect_exclude_list
	{
		Name = "Exclude list";
		UIType = "ListBox";
	}
	Affect_include_list
	{
		Name = "Include list";
		UIType = "ListBox";
	}
	
}

Layout "Default"
{
	Tab "VRayDirt"
	{
		occluded_col;
		unoccluded_col;
		radius;
		distribution;
		falloff;
		subdivs;
		bias_x;
		bias_y;
		bias_z;		
		ignore_for_gi;
		consider_same_object_only;
		double_sided;
		invert_normal;
		work_with_transparency;
		ignore_self_occlusion;
		environment_occlusion;
		mode;
		affect_reflection_elements;
		glossiness;
	}
	
	Tab "Render nodes"
	{
		Row
		{
			Group "Include list", 44%
			{
				Render_include_list;
			}
			Group, 12%
			{
				Button RenderMoveToExclude, AlignCenter = ">>";
				Button RenderMoveToInclude, AlignCenter = "<<";				
			}
			Group "Exclude list", 44%
			{
				Render_exclude_list;
			}
		}		
	}
	
	Tab "Affect results nodes"
	{
		Row
		{
			Group "Include list", 44%
			{
				Affect_include_list;
			}
			Group, 12%
			{
				Button AffectMoveToExclude, AlignCenter = ">>";
				Button AffectMoveToInclude, AlignCenter = "<<";				
			}
			Group "Exclude list", 44%
			{
				Affect_exclude_list;
			}
		}		
	}
}


BeginScript
{
	function mode_OnChanged()
	{
		if(mode == 0)
		{
			glossiness.Enable(false);
		} else {
			glossiness.Enable(true);
		}		
		
		PPG.Refresh();
	}	

    // Fills the names of the scene objects in coresponding ppg strings parameters
	function Fill_Scene_Objs()
	{
        InitionalStrFill("affect_include_objs_str");
        InitionalStrFill("render_include_objs_str");
        
		PPG.Refresh(); // !!!
	}
    
    // Sets the given ppg string parameter to hold all 
    // the names of the scene objects concatenated with '$'
    function  InitionalStrFill(strParam)
    {
		var oScene 	= Application.ActiveProject.ActiveScene;
		var oRoot 	= oScene.Root;
		
        var scene_objs =  oRoot.FindChildren("*", "", siGeometryFamily);
    
        var newList = [];
        for(i = 0; i < scene_objs.Count; i++)
            newList.push(scene_objs.Item(i).FullName);
        
        PPG.Inspected(0).Parameters(strParam).Value = newList.join("$");        
    }
    
	// Fills the ListBoxes getting information from the given strings 
	function FromStrFill(objs, ui_objs_item)
	{						
		var objs_arr = objs.split("$");
					
		var objs_lBox = PPG.PPGLayout.Item(ui_objs_item);
		var items = new Array(objs_arr.length * 2);
					
		for(i = 0; i < objs_arr.length; i++)
		{
			items[i * 2] = objs_arr[i]; //Label
			items[i * 2 + 1] = objs_arr[i]; //Value
		}
		
		items = items.sort();
		objs_lBox.UIItems = items;
					
		PPG.Refresh(); // !!!
	}
    
    // Sets the correct information in the PPG ListBoxes
    function UpdateDirtListBoxesFromStr()
    {
		FromStrFill(PPG.affect_include_objs_str.Value, "Affect_include_list");
		FromStrFill(PPG.affect_exclude_objs_str.Value, "Affect_exclude_list");        
        FromStrFill(PPG.render_include_objs_str.Value, "Render_include_list");
		FromStrFill(PPG.render_exclude_objs_str.Value, "Render_exclude_list");        
    }
	
    // Moves the selected element(s) of the "uiListBox" from "fromList" to "toList"
	function OnbuttonClick(fromList, toList, uiListBox)
	{
		var oLayout = PPG.PPGLayout ;
		
		//Get the selection (it is separted by ";")
		var strSel = PPG.Inspected(0).Parameters(uiListBox).Value;
        Logmessage(strSel);
		
		//If nothing is selected and the user still presses the button do nothing
		if(strSel.length == 0)
			return;
		
		var splitSel = strSel.split(";");	

		//Add the selected items to "toList"
		var tArr = [];
		var excludedList = PPG.Inspected(0).Parameters(toList).Value;
		
		if(excludedList.length)
			tArr.push(excludedList);		
		
		for(i = 0; i < splitSel.length; i++)
		{
			tArr.push(splitSel[i]);
		}
		
		var arr = tArr.join("$");
				
		PPG.Inspected(0).Parameters(toList).Value = arr;
		
		//Remove the selected items from "fromList"
		var newAllArr = [];
		var currentAllArr = PPG.Inspected(0).Parameters(fromList).Value.split("$");
		var selected;
		
		for(l = 0; l < currentAllArr.length; l++)
		{
			selected = false;
			
			for(k = 0; k < splitSel.length; k++)
				if(currentAllArr[l] == splitSel[k])
					selected = true;
					
			if(!selected)
				newAllArr.push(currentAllArr[l]);	
		}
		
		PPG.Inspected(0).Parameters(fromList).Value = newAllArr.join("$");		
		
        UpdateDirtListBoxesFromStr();
				
		PPG.Refresh(); // !!!
	}
	
	function AffectMoveToExclude_OnClicked()
	{	
		OnbuttonClick("affect_include_objs_str", "affect_exclude_objs_str", "Affect_include_list");
	}
	
	function AffectMoveToInclude_OnClicked()
	{	
		OnbuttonClick("affect_exclude_objs_str", "affect_include_objs_str", "Affect_exclude_list");
	}
    
	function RenderMoveToExclude_OnClicked()
	{	
		OnbuttonClick("render_include_objs_str", "render_exclude_objs_str", "Render_include_list");
	}
	
	function RenderMoveToInclude_OnClicked()
	{	
		OnbuttonClick("render_exclude_objs_str", "render_include_objs_str", "Render_exclude_list");
	}

    function SetPPGListBoxAttributes(item)
    {
        var oPPGLayout = PPG.PPGLayout;
        
        var oItem = oPPGLayout.Item(item);
		oItem.SetAttribute( "CY", 100 );
		oItem.SetAttribute( siUICY, 650);
		oItem.SetAttribute( siUICX, 130);
		oItem.SetAttribute( siUINoLabel, true );	 
		oItem.SetAttribute( "MultiSelectionListBox", true );
    }
    
	function OnInit()
	{
		Fill_Scene_Objs();
		
        UpdateDirtListBoxesFromStr();
		
        SetPPGListBoxAttributes("Affect_include_list");
        SetPPGListBoxAttributes("Affect_exclude_list");
        SetPPGListBoxAttributes("Render_include_list");
        SetPPGListBoxAttributes("Render_exclude_list");
        
		PPG.Refresh(); // !!!
	}
}
EndScript


Plugin = Shader
{
	FileName = "VRayDirt";
}

HelpFile = "http://www.spot3d.com/vray/help/softimage/150R1/vraydirt.htm";