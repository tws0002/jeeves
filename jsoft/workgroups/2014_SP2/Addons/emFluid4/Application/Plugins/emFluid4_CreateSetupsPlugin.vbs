' emFluid4_CreateSetupsPlugin
' Initial code generated by Softimage SDK Wizard
' Executed Mon Jan 3 18:23:20 UTC+0100 2011 by Administrator
' 
Option Explicit

function XSILoadPlugin( in_reg )
	in_reg.Author	= "Eric Mootz"
	in_reg.Name		= "emFluid4_CreateSetupsPlugin"
	in_reg.Major	= 1
	in_reg.Minor	= 0

	logmessage in_reg.OriginPath
	logmessage in_reg.UserData

	in_reg.RegisterMenu siMenuTbGetPrimitiveID,"emFluid4 Setups",true,false
	'RegistrationInsertionPoint - do not remove this line

	XSILoadPlugin = true
end function

function XSIUnloadPlugin( in_reg )
	dim strPluginName
	strPluginName = in_reg.Name
	Application.LogMessage strPluginName & " has been unloaded.",siVerbose
	XSIUnloadPlugin = true
end function

function emFluid4Setups_Init( in_ctxt )
	dim oMenu,oMenuItem
	set oMenu = in_ctxt.Source
	oMenu.name = "emFluid4"
	'
	oMenu.AddCallbackItem "Combustion, Standard",										"On_emFluid4CreateFireSetup"
	oMenu.AddCallbackItem "Combustion, Standard, with automatic Fluid Box",				"On_emFluid4CreateFireSetup"
	oMenu.AddCallbackItem "Combustion, From Selection, with one Fluid Box for All",		"On_emFluid4CreateFireSetup"
	oMenu.AddCallbackItem "Combustion, From Selection, with one Fluid Box for Each",	"On_emFluid4CreateFireSetup"
	'
	emFluid4Setups_Init = true
end function





'
'   // =====-----.....
'  // ===---...
' // =-.			helper functions and menu item callback functions
'

' // ------------------------------------------------------------
' // returns the installation path of the plugin called 'pluginName'
Function GetPluginOriginPath( pluginName )	
	dim path
	dim oXSIapp,p,plist
	set oXSIapp = Application.Application
	set plist = oXSIapp.Plugins
	path = "not found"
	for each p in plist
		if p.Name = pluginName then
			path = p.OriginPath
			exit for
		end if
	next
	GetPluginOriginPath = path
End Function

' // ------------------------------------------------------------
' // create a fire setup
' // params:	setupType		the type of setup:
' // 							0: standard
' // 							1: standard (with auto. fluid box)
' // 							4: from selection (one fluid box for all)
' // 							7: from selection (one fluid box for each)
' // 			modelFileName	the path+filename of the base model
' // returns: 0 on success, else -1: no valid input objects selected
Function emFluid4CreateFireSetup( setupType, modelFileName )	
	' init return value
	emFluid4CreateFireSetup = 0

	' declare the vars
	dim keepVisualFeedbackBox
	Dim oCollectionEmitters,oCollectionFluidBoxes
	Dim oModel,oPointCloud,oParent,oFluidBox,oEmitter
	Dim oVisualFeedbackBox
	Dim oNodeRef,oNodeFuel
	Dim iceTree,count
	Dim i,f,g,o,p,s
	dim x,y,z,bbarray
	dim minx,miny,minz,maxx,maxy,maxz
	dim bbminx,bbminy,bbminz,bbmaxx,bbmaxy,bbmaxz
	
	' Create - if necessary - a collection containing all currently selected and valid objects.
	' They will be used as fuel emitters.
	set oCollectionEmitters = CreateObject("XSI.Collection")
	if setupType = 4 or setupType = 7 then
		set s = GetValue("SelectionList")
		for each o in s
			if TypeName(o) <> "CollectionItem" and o.families = "3D Objects" then
				oCollectionEmitters.Add o
			end if
		next
		' if collection empty then error
		if oCollectionEmitters.count = 0 then
			emFluid4CreateFireSetup = -1
			exit function
		end if
	end if
	
	' Import the base model, put its point cloud under the scene root and rename the point cloud.
	ImportModel modelFileName,,,oModel
	set oPointCloud = GetValue(oModel.FullName & ".PointCloud")
	CutObj oPointCloud.FullName
	oPointCloud.Name = "PointCloud_Fire"

	' Create a null under which all the emFluid4 related objects are going to be parented.
	SIGetPrim "Null", "Things_for_" & oPointCloud.Name, , true, oParent
	
	' set the keepVisualFeedbackBox flag
	keepVisualFeedbackBox = true
	if setupType = 7 then
		keepVisualFeedbackBox = false
	end if

	' put the visual feedback box under oParent (or delete it),
	set oVisualFeedbackBox = GetValue(oModel.FullName & ".VisualFeedback_AlphaBox")
	if keepVisualFeedbackBox then
		ParentObj oParent.FullName, oVisualFeedbackBox.FullName
	else
		DeleteObj oVisualFeedbackBox.FullName
	end if


	' Delete the model.
	DeleteObj oModel.FullName

	' Set the iceTree variable.
	iceTree = oPointCloud.Name & ".pointcloud.ICETree"

	' Set the emFluid4 simulation start frame according to the current frame start.
	f = GetValue("PlayControl.In") + 2
	SetValue iceTree & ".emFluid4___Solver.Global_Simulation_Start_Frame", f
	
	' Set the emFluid4 fluid box mode according to setupType.
	if setupType = 0 then	SetValue iceTree & ".emFluid4___Solver.Box_Mode", 3	' "Automatic, Alpha Box as Limit"
	if setupType = 1 then	SetValue iceTree & ".emFluid4___Solver.Box_Mode", 2	' "Automatic, no Limit"
	if setupType = 4 then	SetValue iceTree & ".emFluid4___Solver.Box_Mode", 3	' "Automatic, Alpha Box as Limit"
	if setupType = 7 then	SetValue iceTree & ".emFluid4___Solver.Box_Mode", 0	' "Manual, all Boxes"
	
	'
	' // ===---...
	' // =	Create a default fuel emitter, if necessary.
	' // ===---...
	'
	if setupType = 0 or setupType = 1 then
		' create a null for the default fuel emitter
		SIGetPrim "Null", "Emitter_Fuel", oParent.Name, true, oEmitter
		SetValue oEmitter.Name & ".null.primary_icon", 2
		set f = oEmitter.LocalScaling
		f.set 2,2,2
		oEmitter.LocalScaling = f
		set f = oEmitter.LocalTranslation
		f.set -1,1,1
		oEmitter.LocalTranslation = f
		' clear oCollectionEmitters and add the emitter
		oCollectionEmitters.RemoveAll
		oCollectionEmitters.Add oEmitter
	end if

	'
	' // ===---...
	' // =	Create the fluid box(es) and fill oCollectionFluidBoxes.
	' // ===---...
	'
	set oCollectionFluidBoxes = CreateObject("XSI.Collection")
	if setupType = 0 then
		' create an implicit cube for the default fluid box
		SIGetPrim "Cube", "FluidBox", oParent.Name, true, oFluidBox
		SetValue oFluidBox.Name & ".cube.length", 1
		AddExpr  oFluidBox.Name & ".cube.length", , true
		set f = oFluidBox.LocalScaling
		f.set 18,28,18
		oFluidBox.LocalScaling = f
		set f = oFluidBox.LocalTranslation
		f.set 0,13,0
		oFluidBox.LocalTranslation = f
		' add it to oCollectionFluidBoxes
		oCollectionFluidBoxes.Add oFluidBox
	end if
	if setupType = 1 then
		' nothing
	end if
	if setupType = 4 then
		' calculate the bounding box of oCollectionEmitters
		for i = 0 to oCollectionEmitters.count-1
			set o = oCollectionEmitters(i)
			set g = o.ActivePrimitive.Geometry
			if typename(g) = "Nothing" then
				minx = o.Kinematics.Global.Transform.posx
				miny = o.Kinematics.Global.Transform.posy
				minz = o.Kinematics.Global.Transform.posz
				maxx = minx
				maxy = miny
				maxz = minz
			else
				bbarray = g.GetBoundingBox(o.Kinematics.Global.Transform)
				minx = bbarray(0) - bbarray(3)/2
				miny = bbarray(1) - bbarray(4)/2
				minz = bbarray(2) - bbarray(5)/2
				maxx = minx + bbarray(3)
				maxy = miny + bbarray(4)
				maxz = minz + bbarray(5)
			end if
			if i = 0 then
				bbminx = minx
				bbminy = miny
				bbminz = minz
				bbmaxx = maxx
				bbmaxy = maxy
				bbmaxz = maxz
			else
				if minx < bbminx then bbminx = minx
				if miny < bbminy then bbminy = miny
				if minz < bbminz then bbminz = minz
				if maxx > bbmaxx then bbmaxx = maxx
				if maxy > bbmaxy then bbmaxy = maxy
				if maxz > bbmaxz then bbmaxz = maxz
			end if
		next
		' make the bounding box a little bigger
		bbminx = bbminx - 3
		bbminy = bbminy - 1
		bbminz = bbminz - 3
		bbmaxx = bbmaxx + 3
		bbmaxy = bbmaxy + 8
		bbmaxz = bbmaxz + 3
		' create an implicit cube for the fluid box
		SIGetPrim "Cube", "FluidBox", oParent.Name, true, oFluidBox
		SetValue oFluidBox.Name & ".cube.length", 1
		AddExpr  oFluidBox.Name & ".cube.length", , true
		' set the translation and scaling from the bounding box
		set f = oFluidBox.LocalScaling
		x = bbmaxx-bbminx
		y = bbmaxy-bbminy
		z = bbmaxz-bbminz
		if x < 8 then
			x = 4 - x/2
			bbminx = bbminx - x
			bbmaxx = bbmaxx + x
			x = bbmaxx-bbminx
		end if
		if y < 8 then
			y = 4 - y/2
			bbminy = bbminy - y
			bbmaxy = bbmaxy + y
			y = bbmaxy-bbminy
		end if
		if z < 8 then
			z = 4 - z/2
			bbminz = bbminz - z
			bbmaxz = bbmaxz + z
			z = bbmaxz-bbminz
		end if
		f.set x,y,z
		oFluidBox.LocalScaling = f
		set f = oFluidBox.LocalTranslation
		f.set bbminx+x/2,bbminy+y/2,bbminz+z/2
		oFluidBox.LocalTranslation = f
		' add it to oCollectionFluidBoxes
		oCollectionFluidBoxes.Add oFluidBox
	end if
	if setupType = 7 then
		' create a fluid box for each item in oCollectionEmitters
		for i = 0 to oCollectionEmitters.count-1
			' calc item's bounding box
			set o = oCollectionEmitters(i)
			set g = o.ActivePrimitive.Geometry
			if typename(g) = "Nothing" then
				bbminx = o.Kinematics.Global.Transform.posx
				bbminy = o.Kinematics.Global.Transform.posy
				bbminz = o.Kinematics.Global.Transform.posz
				bbmaxx = bbminx
				bbmaxy = bbminy
				bbmaxz = bbminz
			else
				bbarray = g.GetBoundingBox(o.Kinematics.Global.Transform)
				bbminx = bbarray(0) - bbarray(3)/2
				bbminy = bbarray(1) - bbarray(4)/2
				bbminz = bbarray(2) - bbarray(5)/2
				bbmaxx = bbminx + bbarray(3)
				bbmaxy = bbminy + bbarray(4)
				bbmaxz = bbminz + bbarray(5)
			end if
			' make the bounding box a little bigger
			bbminx = bbminx - 5
			bbminy = bbminy - 2
			bbminz = bbminz - 5
			bbmaxx = bbmaxx + 5
			bbmaxy = bbmaxy + 20
			bbmaxz = bbmaxz + 5
			' create an implicit cube for the fluid box
			SIGetPrim "Cube", "FluidBox" & i & "___" & o.Name, oParent.Name, true, oFluidBox
			SetValue oFluidBox.Name & ".cube.length", 1
			AddExpr  oFluidBox.Name & ".cube.length", , true
			' set the translation and scaling from the bounding box
			set f = oFluidBox.LocalScaling
			x = bbmaxx-bbminx
			y = bbmaxy-bbminy
			z = bbmaxz-bbminz
			if x < 8 then
				x = 4 - x/2
				bbminx = bbminx - x
				bbmaxx = bbmaxx + x
				x = bbmaxx-bbminx
			end if
			if y < 8 then
				y = 4 - y/2
				bbminy = bbminy - y
				bbmaxy = bbmaxy + y
				y = bbmaxy-bbminy
			end if
			if z < 8 then
				z = 4 - z/2
				bbminz = bbminz - z
				bbmaxz = bbmaxz + z
				z = bbmaxz-bbminz
			end if
			f.set x,y,z
			oFluidBox.LocalScaling = f
			set f = oFluidBox.LocalTranslation
			f.set bbminx+x/2,bbminy+y/2,bbminz+z/2
			oFluidBox.LocalTranslation = f
			' add it to oCollectionFluidBoxes
			oCollectionFluidBoxes.Add oFluidBox
		next
	end if

	'
	' // ===---...
	' // =	Connect the fluid boxes:
	' // =	Connect the items in oCollectionFluidBoxes to the emFluid4 setup.
	' // ===---...
	'
	for i = 0 to oCollectionFluidBoxes.count-1
		set oFluidBox = oCollectionFluidBoxes(i)
		' connect oFluidBox to the emFluid4 solver compound
		set oNodeRef = AddICENode("GetDataNode", iceTree)
		SetValue oNodeRef.FullName & ".reference", oFluidBox.FullName
		if i > 0 then AddPortToICENode iceTree & ".emFluid4___Solver.In_Fluid_Box_SRT_" & i-1, siNodePortDataInsertionLocationAfter
		ConnectICENodes iceTree & ".emFluid4___Solver.In_Fluid_Box_SRT_" & i, oNodeRef.FullName & ".outname"
	next
	
	'
	' // ===---...
	' // =	Connect the fuel emitters:
	' // =	Connect the items in oCollectionEmitters as fuel emitters to the emFluid4 setup.
	' // =	This is done in two passes: the 1st pass for the nulls ("from SRT")
	' // =	and the 2nd pass for the geometries ("from Points").
	' // ===---...
	'
	for p = 1 to 2
		count = 0
		for i = 0 to oCollectionEmitters.count-1
			set oEmitter = oCollectionEmitters(i)
			set g = oEmitter.ActivePrimitive.Geometry
			' center
			if p = 1 and typename(g) = "Nothing" then
				' get a "emFluid4 _ Emit Fuel" compound, set a few values
				' and connect it to the "emFluid4 ___ Emit Data" compound
				set oNodeFuel = AddICECompoundNode("emFluid4 _ Emit Fuel", iceTree)
				SetValue oNodeFuel.FullName & ".Heat",		600
				SetValue oNodeFuel.FullName & ".Oxygen",		1
				if count > 0 then AddPortToICENode iceTree & ".emFluid4_____Emit_Data.In_Data_" & count, siNodePortDataInsertionLocationAfter
				ConnectICENodes iceTree & ".emFluid4_____Emit_Data.In_Data_" & count+1, oNodeFuel.FullName & ".Data"
				' connect the fuel emitter to the compound
				set oNodeRef = AddICENode("GetDataNode", iceTree)
				SetValue oNodeRef.FullName & ".reference", oEmitter.FullName
				ConnectICENodes oNodeFuel.FullName & ".In_Name__Position_", oNodeRef.FullName & ".outname"
				'
				count = count + 1
			end if
			' geometry
			if p = 2 and typename(g) <> "Nothing" then
				' get a "emFluid4 ___ Emit Data from Points", set a few values
				' and connect it to the "emFluid4 ___ Emit Data" compound
				set oNodeFuel = AddICECompoundNode("emFluid4 ___ Emit Data from Points", iceTree)
				SetValue oNodeFuel.FullName & ".Size_____Radius_of_the_Points_", 0.25
				SetValue oNodeFuel.FullName & ".Oxygen",		1
				if count > 0 then AddPortToICENode iceTree & ".emFluid4_____Emit_Data.In_Data__" & count, siNodePortDataInsertionLocationAfter
				ConnectICENodes iceTree & ".emFluid4_____Emit_Data.In_Data__" & count+1, oNodeFuel.FullName & ".Data"
				' connect the fuel emitter to the compound
				set oNodeRef = AddICENode("GetDataNode", iceTree)
				SetValue oNodeRef.FullName & ".reference", oEmitter.FullName
				ConnectICENodes oNodeFuel.FullName & ".In_Geometry", oNodeRef.FullName & ".value"
				'
				count = count + 1
			end if
		next
	next


		' Connect oPointCloud to the "Get Fluid Box SRT" compound of oVisualFeedbackBox
	if keepVisualFeedbackBox = true then
		s = oVisualFeedbackBox.FullName & ".cube.ICETree"
		set oNodeRef = AddICENode("GetDataNode", s)
		SetValue oNodeRef.FullName & ".reference", oPointCloud.FullName
		ConnectICENodes s & ".emFluid4___Get_Fluid_Box_SRT.In_Point_Cloud_Name", oNodeRef.FullName & ".outname"
	end if

	' we're done
	DeselectAll
	SelectObj oPointCloud.Name

End Function

' // ------------------------------------------------------------
' // create a fire setup
Function On_emFluid4CreateFireSetup( in_ctxt )	
	' build model's path and file name
	Dim modelFileName
	modelFileName = GetPluginOriginPath("emFluid4_CreateSetupsPlugin")	' get plugin's installation path
	modelFileName = XSIUtils.BuildPath(modelFileName,"..\..\Data\Models")
	modelFileName = XSIUtils.BuildPath(modelFileName,"emFluid4_Fire.emdl")
	' set setup type
	Dim setupType
	if in_ctxt.Source = "Combustion, Standard"										then setupType = 0
	if in_ctxt.Source = "Combustion, Standard, with automatic Fluid Box"			then setupType = 1
	if in_ctxt.Source = "Combustion, From Selection, with one Fluid Box for All"	then setupType = 4
	if in_ctxt.Source = "Combustion, From Selection, with one Fluid Box for Each"	then setupType = 7
	' go
	Dim mem
	mem = SetValue("preferences.scripting.cmdlog")
	SetValue "preferences.scripting.cmdlog", False
	if emFluid4CreateFireSetup(setupType, modelFileName) = -1 then
		MsgBox "No valid input objects selected.",vbExclamation,"emFluid4 Setup"
	end if
	SetValue "preferences.scripting.cmdlog", mem
	'done
	On_emFluid4CreateFireSetup = true
End Function



' - end of file -

