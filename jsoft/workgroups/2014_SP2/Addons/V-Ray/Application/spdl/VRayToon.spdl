# SPDL Generated by XSI Shader Wizard
SPDL
Version = "2.0.0.0";
Reference = "{40EE6B68-9872-4C71-AB8E-5C2E06C00824}";

Language = "JScript";

PropertySet "VRayToon_pset"
{
	Parameter "out" output
	{
		GUID = "{812DDE74-FC71-400E-BBC6-F87BF686EB26}"; 
		Type = color;
	}
	
	Parameter "line_color" input
	{
		GUID = "{9200BF38-4CC1-43F3-ABB4-CB333A0DC271}";
		Type = color;		
		Value = 0.0 0.0 0.0 1.0;
		Texturable = on;
	}
	Parameter "lineWidth" input
	{
		GUID = "{B3A37189-2E69-4446-95ED-9DF0568D5E7D}";
		Type = scalar;		
		Value = 1.5;		
		Texturable = on;
	}
	Parameter "opacity" input
	{
		GUID = "{9AEA5097-4B7C-434D-986D-54E89E2141FA}";
		Type = scalar;		
		Value = 1.0;
		Value Minimum = 0.0;
		Value Maximum = 1.0;
		Texturable = on;
	}	

	Parameter "traceBias" input
	{
		GUID = "{E9170AE9-D550-4C73-BD13-72B283D82094}";
		Type = scalar;		
		Value = 0.2;		
	}
	Parameter "overlapThreshold" input
	{
		GUID = "{1B53D27E-B3EF-4AB4-8D9E-A6483AB31474}";
		Type = scalar;		
		Value = 0.95;
		Value Minimum = 0.0;
		Value Maximum = 1.0;		
	}
	Parameter "normalThreshold" input
	{
		GUID = "{45AA4E71-E9DC-4859-83D7-1DFE9F4A0324}";
		Type = scalar;		
		Value = 0.7;
		Value Minimum = 0.0;
		Value Maximum = 1.0;		
	}	
	
	Parameter "widthType" input
	{
		GUID = "{E92F4D67-3F09-4A26-A02D-F39A37DAF5B3}";
		Type = VT_I4;
		UIType = "Combo";	
		Caps = Persistable;	
		Items
		{
			"Pixels" = 0,
			"World" = 1			
		}		
		Value = 0;		
	}

	Parameter "hideInnerEdges" input
	{
		GUID = "{146E7CAD-9124-437C-88C0-E7129B585275}";
		Type = boolean;		
		Value = off;
	}
	
	Parameter "doSecondaryRays" input
	{
		GUID = "{B7AEBACD-D0D6-4551-BD96-A3B86A1D9B07}";
		Type = boolean;		
		Value = off;	
	}
	
	Parameter "exclude_list" input
	{		
		GUID		= "{C3F70E64-70D5-4476-A7BA-641F15F43F94}";		
		Type		= string;
	}
	
	Parameter "include_list" input
	{		
		GUID		= "{6AD52D97-16EB-4547-B939-D5230AD647F1}";	
		Type		= string;
	}	
}

MetaShader "VRayToon_meta"
{
	Name = "VRayToon";
	Type = volume, volume photon;
	Renderer "mental ray"
	{
		Name = "VRayToon";
		FileName = "VRayToon";
		Options
		{
			"version" = 1;
		}
	}
}

Logic 
{		
}

Defaults
{
	line_color
	{
		Name = "Line color";
		UIType = "rgb";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}	
	lineWidth
	{
		Name = "Line width";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
		UIRange = 0.0 to 100;
	}	
	opacity
	{
		Name = "Opacity";
		Commands = "{F5C75F11-2F05-11D3-AA95-00AA0068D2C0}";
	}	
	
	widthType
	{
		Name = "Width type";
	}	
	hideInnerEdges
	{
		Name = "Hide inner edges";
	}	

	normalThreshold
	{
		Name = "Normal threshold";
	}	
	overlapThreshold
	{
		Name = "Overlap threshold";
	}	
	traceBias
	{
		Name = "Trace bias";
		UIRange = 0.0 to 100;
	}	
	doSecondaryRays
	{
		Name = "Secondary rays";
	}
	exclude_list
	{
		Name = "Exclude list";
		UIType = "ListBox";
	}
	include_list
	{
		Name = "Include list";
		UIType = "ListBox";
	}
}

Layout "Default"
{
	Tab "VRayToon parameters"
	{
		line_color;
		widthType;
		lineWidth;
		opacity;
		hideInnerEdges;
		normalThreshold;
		overlapThreshold;
		traceBias;
		doSecondaryRays;
	}
	
	Tab "Include/Exclude objects"
	{
		Row
		{
			Group "Include list", 44%
			{
				include_list;
			}
			Group, 12%
			{
				Button MoveToExclude, AlignCenter = ">>";
				Button MoveToInclude, AlignCenter = "<<";				
			}
			Group "Exclude list", 44%
			{
				exclude_list;
			}
		}		
	}
}

BeginScript
{
	function OnInit()
	{			
		var oPPGLayout = PPG.PPGLayout;	
		
		//Static part
		var oItem = oPPGLayout.Item("include_list");
		oItem.SetAttribute( "CY", 100 ) ;
		oItem.SetAttribute( siUICY, 160) ;
		oItem.SetAttribute( siUICX, 130) ;
		oItem.SetAttribute( siUINoLabel, true ) ;
		oItem.SetAttribute( "MultiSelectionListBox", true ) ;
		
		var oItem = oPPGLayout.Item("exclude_list");
		oItem.SetAttribute( "CY", 100 ) ;
		oItem.SetAttribute( siUICY, 160) ;
		oItem.SetAttribute( siUICX, 130) ;
		oItem.SetAttribute( siUINoLabel, true ) ;
		oItem.SetAttribute( "MultiSelectionListBox", true ) ;
			 
		//Dynamic part	 
		AddSceneItemsToList( oPPGLayout, "include_list", "exclude_list" );
					
		PPG.Refresh();
	}
		
	function MoveToExclude_OnClicked()
	{
	   MoveSelected( "include_list", "exclude_list" ) ;
	}

	function MoveToInclude_OnClicked()
	{
	   MoveSelected( "exclude_list", "include_list" ) ;
	}

	function MoveSelected( in_FromList, in_ToList )
	{
	   // Figure out what was selected by the user

	   var strSel = PPG.Inspected(0).Parameters(in_FromList).Value ;

	   if ( strSel.length == 0 )
	   {
		   logmessage( "Please select an item" ) ;
		   return ;
	   }

	   var oLayout = PPG.PPGLayout ;

	   var oToList = oLayout.Item( in_ToList ) ;
	   var oFromList = oLayout.Item( in_FromList ) ;

	   var vbItems = new VBArray(oToList.UIItems);
	   var aItems = vbItems.toArray();

	   //The value associated with Multi-selection list box is
	   //a string which is separated with semicolons.
	   var splitSel = strSel.split(";");

	   for( i = 0; i < splitSel.length; ++i)
	   {
		   // Add the string to the "ToList"
	          
		   // Check if the item is already in the list
		   var bIsInTheList = false;
		   for ( j = 0 ; j < aItems.length ; j+=2 )
		   {
			  if ( aItems[j] == splitSel[i] )
			  {
				  logmessage( splitSel[i] + " is already in the list", siWarning ) ;
				  bIsInTheList = true;
				  break;
			  }
		   }

		   if(! bIsInTheList)
		   {
			  // Push the item to end of the list
			  var cntExistingItems = aItems.length

			  aItems[cntExistingItems] = splitSel[i] ; // Label
			  aItems[cntExistingItems+1] = splitSel[i] ; // Value

			  oToList.UIItems = aItems.sort() ;

		   }
	   }

	   // Remove the item from the "FromList"
	   vbItems = new VBArray(oFromList.UIItems);
	   var aCurrentItems = vbItems.toArray() ;
	   var aNewItems = new Array() ;

	   // Fill in the new array with everything except
	   // for the selected item
	   for ( i = 0 ; i < aCurrentItems.length; i++ )
	   {
		   var bIsInTheList = false;
		   for( j = 0; j < splitSel.length; j++)
		   {
			  if ( aCurrentItems[i] == splitSel[j] )
			  {
				  bIsInTheList = true;
				  break;
			  }
		   }
		   if(!bIsInTheList)
		   {
			  aNewItems[aNewItems.length] = aCurrentItems[i] ;
		   }
	   }

	   oFromList.UIItems = aNewItems ;

	   // Reset the selection
	   if ( aNewItems.length > 0 )
	   {
		   PPG.Inspected(0).Parameters(in_FromList).Value = aNewItems[0];
	   }
	   else
	   {
		   PPG.Inspected(0).Parameters(in_FromList).Value = "" ;
	   }

	   // A refresh is required to show the change
	   PPG.Refresh() ;
	}
	
	function AddListBox( in_oLayout, in_Name )
	{	   
	   var oItem = in_oLayout.AddItem( in_Name, "", "ListBox" ) ;
	   oItem.SetAttribute( "CY", 100 ) ;
	   oItem.SetAttribute( siUINoLabel, true ) ;	 
	   oItem.SetAttribute( "MultiSelectionListBox", true ) ;
	}
	
	function AddSceneItemsToList( in_oLayout, in_InclName, in_ExclName )
	{		
		var oItemIncl = in_oLayout.Item(in_InclName);		
		var oItemExcl = in_oLayout.Item(in_ExclName);
		vbItemsExcl = new VBArray(oItemExcl.UIItems);
		var aCurrentItemsExcl = vbItemsExcl.toArray();	 
  
		var oSceneItems = ActiveSceneRoot.FindChildren("*", "", siGeometryFamily);
		var aItems1 = new Array( oSceneItems.Count*2 - aCurrentItemsExcl.length );
		var aItems2 = new Array( aCurrentItemsExcl.length );
		var cntr1 = 0;
		var cntr2 = 0;
		for ( i = 0 ; i < oSceneItems.Count ; i++ )
		{				
			var found = false;
 			for ( j = 0 ; j <aCurrentItemsExcl.length ; j+=2 )
			 {
				if ( aCurrentItemsExcl[j] == oSceneItems.Item(i).FullName )
				{
		 			aItems2[cntr2] = oSceneItems.Item(i).FullName;
					aItems2[cntr2 + 1] = oSceneItems.Item(i).FullName;
					cntr2 = cntr2 + 2;
					found = true;
					break;
				}		
			}
			if(found == false)
			{
				aItems1[cntr1] = oSceneItems.Item(i).FullName;
				aItems1[cntr1 + 1] = oSceneItems.Item(i).FullName;
				cntr1 = cntr1 + 2;		
			}		
		}
		aItems1 = aItems1.sort();
		aItems2 = aItems2.sort();
		oItemIncl.UIItems = aItems1;
		oItemExcl.UIItems = aItems2.slice(0, cntr2);
		var cnt = (aItems1.length + aItems2.length) / 2;
		
		// change Include and Exclude List Height dynamically for number of objects larger than 10
		if (cnt >= 11 && cnt <= 20)
		{
			if (cnt == 20){
				oItemIncl.SetAttribute( siUICY, 310 );
				oItemExcl.SetAttribute( siUICY, 310 );
			}
			else{
				oItemIncl.SetAttribute( siUICY, 160 + (cnt % 10) * 15 );	
				oItemExcl.SetAttribute( siUICY, 160 + (cnt % 10) * 15 );	
			}	
		}
		if (cnt > 20){
			oItemIncl.SetAttribute( siUICY, 310 );
			oItemExcl.SetAttribute( siUICY, 310 );
		}		
		PPG.Refresh() ;
	}	
	
}
EndScript

Plugin = Shader
{
	FileName = "VRayToon";
}

HelpFile = "http://www.spot3d.com/vray/help/softimage/150R1/vray_toon.htm";
