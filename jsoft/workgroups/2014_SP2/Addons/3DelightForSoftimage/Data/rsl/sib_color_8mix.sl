/*
	Copyright (c) 2007 TAARNA Studios International.
*/

/* NOTE: we only support this node if used layers are all top layers
   (no unused layer between two unused nodes). We would need 256 
   versions of sib_color_8mix to accomodate all possibilities that
   are generated by XSI! */

#ifndef __sib_color_8mix_sl
#define __sib_color_8mix_sl

#define MIXER_LAYER_PARAM(n) \
	RGBA_COLOR( i_color##n ); \
	float i_mode##n; \
	RGBA_COLOR( i_weight##n ); \
	float i_alpha##n; \
	float i_inuse##n

#define MIXER_LAYER_EMPTY_PARAM(n) \
	RGBA_COLOR( i_color##n ); \
	RGBA_COLOR( i_weight##n ); \
	float i_inuse##n

#define MIX_LAYER(n) \
	if( i_inuse##n ) \
	{ \
		mixincolor( \
			accum, accum_a, \
			RGBA_COLOR_PARAM( i_color##n ), \
			i_mode##n, RGBA_COLOR_PARAM( i_weight##n ), \
			i_alpha##n ); \
	}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_EMPTY_PARAM(2);
	MIXER_LAYER_EMPTY_PARAM(3);
	MIXER_LAYER_EMPTY_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_EMPTY_PARAM(3);
	MIXER_LAYER_EMPTY_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_EMPTY_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );
	MIX_LAYER( 5 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_PARAM(5);
	MIXER_LAYER_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );
	MIX_LAYER( 5 );
	MIX_LAYER( 6 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_PARAM(5);
	MIXER_LAYER_PARAM(6);
	MIXER_LAYER_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );
	MIX_LAYER( 5 );
	MIX_LAYER( 6 );
	MIX_LAYER( 7 );

	RGBA_ASSIGN( o_result, accum );
}

/* Softimage 2011 */

#define MIXER_LAYER_EMPTY_PARAM(n) \
	float i_inuse##n
	
void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_EMPTY_PARAM(2);
	MIXER_LAYER_EMPTY_PARAM(3);
	MIXER_LAYER_EMPTY_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_EMPTY_PARAM(3);
	MIXER_LAYER_EMPTY_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_EMPTY_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_EMPTY_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_PARAM(5);
	MIXER_LAYER_EMPTY_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );
	MIX_LAYER( 5 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_PARAM(5);
	MIXER_LAYER_PARAM(6);
	MIXER_LAYER_EMPTY_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );
	MIX_LAYER( 5 );
	MIX_LAYER( 6 );

	RGBA_ASSIGN( o_result, accum );
}

void sib_color_8mix(
	float i_mixersize;
	RGBA_COLOR(i_basecolor);

	MIXER_LAYER_PARAM(1);
	MIXER_LAYER_PARAM(2);
	MIXER_LAYER_PARAM(3);
	MIXER_LAYER_PARAM(4);
	MIXER_LAYER_PARAM(5);
	MIXER_LAYER_PARAM(6);
	MIXER_LAYER_PARAM(7);

	output color o_result;
	output float o_result_a; )
{
	RGBA_COLOR( accum );
	RGBA_ASSIGN( accum, i_basecolor );
	
	MIX_LAYER( 1 );
	MIX_LAYER( 2 );
	MIX_LAYER( 3 );
	MIX_LAYER( 4 );
	MIX_LAYER( 5 );
	MIX_LAYER( 6 );
	MIX_LAYER( 7 );

	RGBA_ASSIGN( o_result, accum );
}

#endif
